#!/bin/bash
# Copyright 2015, RackN
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Run digitalrebar in a docker container.
# $1 = OS to run in
# $@ = Command to run, if nothing then /bin/bash -i

export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
# If we are not running inside of Docker, put ourselves in a container.
if ! which docker &>/dev/null; then
    echo "Please install Docker!"
    exit 1
fi

if ! which docker-compose &>/dev/null; then
    echo "Please install docker-compose!"
    exit 1
fi

if [[ $0 = /* ]]; then
    mountdir="$0"
elif [[ $0 = .*  || $0 = */* ]]; then
    mountdir="$(readlink -f "$PWD/$0")"
else
    echo "Cannot figure out where core is!"
    exit 1
fi

# This gets us to core
mountdir="${mountdir%/tools/docker-admin}"
# This gets us to the parent directory of core, where presumably the rest of our repos are checked out
mountdir="${mountdir%/*}"

# Clone the deploy repo to a known location, if we don't already have it.
if [[ ! -d $mountdir/deploy ]]; then
    # Clone the deploy repo to a known location.
    git clone https://github.com/rackn/digitalrebar-deploy "$mountdir/deploy"
elif [[ ! -d $mountdir/deploy/compose/components/rebar_api ]]; then
    echo "$mountdir/deploy does not contain a checkout of the digitalrebar container deployer!"
elif [[ ! -L  $mountdir/deploy/compose/components/rebar_api/digitalrebar ]]; then
     ln -s "$mountdir" \
        $mountdir/deploy/compose/components/rebar_api/digitalrebar
fi

mkdir -p "$HOME/.cache/digitalrebar/tftpboot"

bridge="docker0"
bridge_re='-b=([^ ])'
bridge_addr_re='inet ([0-9.]+)/'
# If we told Docker to use a custom bridge, here is where it is at.
[[ $(ps -C docker -o 'command=') =~ $bridge_re ]] && \
    bridge="${BASH_REMATCH[1]}"
if ! [[ -f $mountdir/core/config/networks/the_admin.json ]]; then
    echo "Cannot find the_admin.json to get the address we should add to the Docker bridge!"
    exit 1
fi
bridge_router_ip="$(jq -r '.router.address' < "$mountdir/core/config/networks/the_admin.json")"

if ! fgrep -q "$bridge_router_ip" < <(ip addr show dev "$bridge"); then
    sudo ip addr add "$bridge_router_ip" dev "$bridge"
fi

sudo rm -rf "$HOME/.cache/digitalrebar/tftpboot/nodes"

cd "$mountdir/deploy/compose"
docker-compose up -d
echo "Bringing containers up.  Exiting the shell will kill and remove the containers"
export PS1="(docker-compose) $PS1"
/bin/bash -i
docker-compose kill
docker-compose rm -f
