#!/bin/bash
# Copyright 2014, Dell
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Run opencrowbar in a docker container.
# $1 = OS to run in
# $@ = Command to run, if nothing then /bin/bash -i

export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
# If we are not running inside of Docker, put ourselves in a container.
if ! which docker &>/dev/null; then
    echo "Please install Docker!"
    exit 1
fi

IFS=' .' read -a docker_version < <(docker version |awk -F: '/Client version/ {print $2}') 
if ! ((docker_version[0] > 1 || (docker_version[0] == 1 && docker_version[1] >= 3))); then
    echo "docker-admin needs Docker Client version 1.3 or later! You versions are:"
    docker version
    exit 1
fi

if [[ $0 = /* ]]; then
    mountdir="$0"
elif [[ $0 = .*  || $0 = */* ]]; then
    mountdir="$(readlink -f "$PWD/$0")"
else
    echo "Cannot figure out where core is!"
    exit 1
fi

ssh() {
    command ssh -oCheckHostIP=no -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null "$@"
}

# The container that we will base the admin image on.
# Needs to be derived from centos 7.
#container="centos:centos7"
#container="opencrowbar/centos:7.0-0"
container="opencrowbar/centos:7.0-1"
# This gets us to core
mountdir="${mountdir%/tools/docker-admin}"
# This gets us to the parent directory of core, where presumably the rest of our repos are checked out
mountdir="${mountdir%/*}"

tftproot="/tftpboot"

echo "We will mount $mountdir at /opt/opencrowbar"
mkdir -p "$HOME/.cache/opencrowbar/tftpboot"
mkdir -p "$HOME/.cache/opencrowbar/run"

docker_args=(-t -i -w /opt/opencrowbar/core -v "$mountdir:/opt/opencrowbar")
docker_args+=(-v "$HOME/.cache/opencrowbar/tftpboot:$tftproot")
docker_args+=(-v "$HOME/.cache/opencrowbar/run:/run")
docker_args+=(-v "/sys/fs/cgroup:/sys/fs/cgroup:ro")
docker_args+=(-e "OUTER_UID=$(id -u)")
docker_args+=(-e "OUTER_GID=$(id -g)")
if [[ -f $HOME/.ssh/id_rsa.pub ]]; then
    docker_args+=(-e "SSH_PUBKEY=$(cat "$HOME/.ssh/id_rsa.pub")")
else
    docker_args+=(-e "SSH_PUBKEY=")
fi
docker_args+=(-p "3000:3000")
docker_args+=(-p "443:443")
bridge="docker0"
bridge_re='-b=([^ ])'
bridge_addr_re='inet ([0-9.]+)/'
# If we told Docker to use a custom bridge, here is where it is at.
[[ $(ps -C docker -o 'command=') =~ $bridge_re ]] && \
    bridge="${BASH_REMATCH[1]}"
# Capture the IP of the bridge for later when we are hacking up
# proxies.
[[ $(ip -o -4 addr show dev $bridge) =~ $bridge_addr_re ]] && \
    bridge_ip="${BASH_REMATCH[1]}"
# Make sure the container knows about our proxies, if applicable.
. "$mountdir/core/tools/proxy_lib.sh"
mangle_proxies "$bridge_ip"
for proxy in "${!mangled_proxies[@]}"; do
    docker_args+=(-e "$proxy=${mangled_proxies[$proxy]}")
done
docker_args+=("--cap-add=NET_ADMIN"
              "--cap-add=SYS_ADMIN"
              "--cap-add=MKNOD"
              "--cap-add=SYS_TIME")
if [[ $1 ]]; then
    ocb_args=("$@")
    if [[ ${ocb_args[0]} != ${ocb_args[0]#./} ]]; then
        ocb_args[0]="/opt/opencrowbar/core/${ocb_args[0]#./}"
    fi
else
    ocb_args=("/bin/bash" "-i")
fi
sudo rm -rf "$HOME/.cache/opencrowbar/tftpboot/nodes"
container_id=$(docker run -d "${docker_args[@]}" \
                      "$container" \
                      /opt/opencrowbar/core/tools/docker-init.sh)
container_addr=$(gawk 'match($0,/"IPAddress": "([^"]+)"/,m) {print m[1]}' < <(docker inspect $container_id))

if [[ ! $container_addr ]]; then
    echo "Cannot find address of Docker container!"
    docker kill $container_id
    exit 1
fi
echo "Waiting for container SSH access to root@$container_addr (approx. 15 seconds)"
while ! ssh -l root "$container_addr" true &>/dev/null; do
    printf '.'
    sleep 1
done
echo
ssh -l root -t "$container_addr" -- "${ocb_args[@]}"
echo "Your admin container is still running!"
echo "You can kill it with:"
echo "  docker kill $container_id"
echo
echo "You can SSH into it with root@$container_addr"
