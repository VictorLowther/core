# Kickstart file automatically generated by anaconda.

install
url --url <%= @os_install_site %>
<% if @online -%>
# Add support for our local proxy.
repo --name="Rebar Local"  --baseurl=<%=@os_install_site %> --proxy="<%=@proxy%>" --cost=100
<% end %>
# key --skip
# Disable geolocation for language and timezone
# Currently broken by https://bugzilla.redhat.com/show_bug.cgi?id=1111717
# geoloc 0
timezone --utc UTC
lang en_US.UTF-8
keyboard us
# rebar
rootpw --iscrypted <%= node[:rebar][:provisioner][:server][:default_password_hash] %>
firewall --disabled
authconfig --enableshadow --enablemd5
selinux --disabled
bootloader --location=mbr --driveorder=<%= @rootdev %> --append="rhgb quiet"
zerombr
ignoredisk --only-use=<%= @rootdev %>
clearpart --all --drives=<%= @rootdev %>
part /boot --fstype ext4 --size=512 --ondisk=<%= @rootdev %>
part /boot/efi --fstype vfat --size=512 --ondisk=<%= @rootdev %>
part swap --recommended
part pv.6 --size=1 --grow --ondisk=<%= @rootdev %>
volgroup <%=@name.split('.')[0]%> --pesize=32768 pv.6
logvol / --fstype ext4 --name=lv_root --vgname=<%=@name.split('.')[0]%> --size=1 --grow
text
reboot

%packages
@core
trousers
fipscheck
device-mapper-multipath
openssh
curl.x86_64
efibootmgr
tar
%end

%post

exec > /root/post-install.log 2>&1
set -x
export PS4='${BASH_SOURCE}@${LINENO}(${FUNCNAME[0]}): '
<% unless @online -%>
(cd /etc/yum.repos.d && rm *)
<% end -%>

key_re='rebar\.install\.key=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $key_re ]]; then
    export REBAR_KEY="${BASH_REMATCH[1]}"
    echo "$REBAR_KEY" >/etc/rebar.install.key
elif [[ -f /etc/rebar.install.key ]]; then
    export REBAR_KEY="$(cat /etc/rebar.install.key)"
fi

hostname_re='rebar\.fqdn=([^ ]+)'
if [[ $(cat /proc/cmdline) =~ $hostname_re ]]; then
   HOSTNAME=${BASH_REMATCH[1]}
   if [ -f /etc/sysconfig/network ] ; then
      sed -i -e "s/HOSTNAME=.*/HOSTNAME=${HOSTNAME}/" /etc/sysconfig/network
    fi
    echo "${HOSTNAME#*.}" >/etc/domainname
else
    echo "Cannot set hostname, we fail."
    sleep 999
    reboot -f
fi
echo "$HOSTNAME" > /etc/hostname
hostname "$HOSTNAME"

echo "proxy=<%=@proxy%>" >> /etc/yum.conf
sed -i '/^enabled/ s/1/0/' /etc/yum/pluginconf.d/fastestmirror.conf
echo "Setting up repositories"
<% @repos.keys.sort.each do |repo| -%>
  <% if repo == "online"
       rpm_sources, bare_sources = @repos[repo].keys.sort.partition{|r|r =~ /^rpm /} -%>
    <% bare_sources.each do |source|
         _, name, _, url = source.split -%>
cat >/etc/yum.repos.d/rebar-<%=name%>.repo <<EOF
[rebar-<%=name%>]
name=Rebar <%=name%> Repo
baseurl=<%= url %>
gpgcheck=0
EOF
    <% end -%>
    <% rpm_sources.each do |repo|
         url = repo.split(' ',2)[1]
         file = url.split('/').last
         file = file << ".rpm" unless file =~ /\.rpm$/ -%>
(
export http_proxy=<%=@proxy%>
curl -o '/var/cache/<%=file%>' -L '<%=url%>'
rpm -Uvh '/var/cache/<%=file%>'
)
    <% end -%>
  <% else
    url = @repos[repo].keys.first -%>
cat >/etc/yum.repos.d/rebar-<%=repo%>.repo <<EOF
[rebar-<%=repo%>]
name=Rebar <%=repo%> Repo
<%= url %>
gpgcheck=0
EOF
  <% end -%>
<% end -%>

# Install ntpdate
yum -y install ntpdate jq

# Make sure we can install gems
cat >/etc/gemrc <<EOF
:sources:
<% if @online -%>
- http://rubygems.org/
<% end -%>
- <%=@provisioner_web%>/gemsite/
gem: --no-ri --no-rdoc --bindir /usr/local/bin --http-proxy <%=@proxy%>
EOF

cp /etc/gemrc /root/.gemrc

rsyslog_dir="/etc/rsyslog.d"
mkdir -p "$rsyslog_dir"
echo '$IncludeConfig /etc/rsyslog.d/*.conf' >>/etc/rsyslog.conf
if [ ! -f "$rsyslog_dir/10-rebar-client.conf" ]; then
    echo "*.* @@$<%= @logging_server %>" > "$rsyslog_dir/10-rebar-client.conf"
    if ! curl -f -s -o "$rsyslog_dir/00-rebar-debug.conf" \
        <%= @provisioner_web %>/rsyslog.d/00-rebar-debug.conf
    then
        rm -f "$rsyslog_dir/00-rebar-debug.conf"
    fi
fi

mkdir -p /root/.ssh
cat >/root/.ssh/authorized_keys <<EOF
<%= @keys %>
EOF

echo "PermitRootLogin without-password" >> /etc/ssh/sshd_config

# Allow client to pass http proxy environment variables
echo "AcceptEnv http_proxy https_proxy no_proxy" >> /etc/ssh/sshd_config

# Set up the default rebar service.
curl -s -o /usr/sbin/rebar "<%=@web_path%>/rebar_join.sh"
chmod +x /usr/sbin/rebar

cat >/etc/systemd/system/rebar.service <<EOF
[Unit]
Description=Rebar Node Checkin
Documentation=http://github.com/digitalrebar
After=sshd.service

[Service]
Type=oneshot
ExecStart=/usr/sbin/rebar start

[Install]
WantedBy=multi-user.target
EOF

systemctl enable rebar

# The network barclamp is in charge of doing horrible things
# to the network, not NetworkManager
chkconfig NetworkManager off || :
chkconfig network on || :

curl -u "$REBAR_KEY" --digest -L -X PUT -d "bootenv=local" \
    "<%=@api_server%>/api/v2/nodes/$HOSTNAME"

# Wait for the provisioner to change the bootenv
while true; do
      curl -s -f -L -o /tmp/bootstate "<%=@provisioner_web%>/nodes/$HOSTNAME/bootstate" && \
        [[ -f /tmp/bootstate && $(cat /tmp/bootstate) = local ]] && break
    sleep 1
done

sync
%end
